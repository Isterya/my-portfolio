/// <reference types="node" />

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const filesToTrack = {
  privacyPolicy: 'src/pages/privacyPolicyPage/PrivacyPolicyPage.tsx',
  termsOfUse: 'src/pages/userTermsPage/UserTermsPage.tsx',
};

const locales = {
  en: 'en-US',
  ru: 'ru-RU',
  pl: 'pl-PL',
};

function getLastUpdated(filePath: string, locale: string) {
  try {
    const rawDate = execSync(`git log -1 --format="%cd" -- ${filePath}`).toString().trim();
    const date = new Date(rawDate);

    return date.toLocaleDateString(locale, {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  } catch (error) {
    console.error(`Failed to get last updated for ${filePath}:`, error);
    return null;
  }
}

function generate() {
  const data: Record<string, Record<string, string>> = {};

  for (const [key, filePath] of Object.entries(filesToTrack)) {
    data[key] = {};

    for (const [localeKey, locale] of Object.entries(locales)) {
      const formattedDate = getLastUpdated(filePath, locale);
      if (formattedDate) {
        data[key][localeKey] = formattedDate;
      }
    }
  }

  const content = `// This file is autogenerated. Do not edit manually.
export const lastUpdated = ${JSON.stringify(data, null, 2)};
`;

  fs.writeFileSync(path.resolve(__dirname, '../data/lastUpdated.ts'), content, 'utf8');
  console.log('âœ… lastUpdated.ts generated successfully.');
}

generate();
